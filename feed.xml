<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://andrew.hawker.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andrew.hawker.io/" rel="alternate" type="text/html" /><updated>2020-04-02T08:49:57-07:00</updated><id>https://andrew.hawker.io/feed.xml</id><title type="html">Andrew Hawker</title><subtitle>Personal website of Andrew Hawker</subtitle><author><name>Andrew Hawker</name></author><entry><title type="html">Contest - Day 2 - Happy Number</title><link href="https://andrew.hawker.io/leetcode/2020/04/02/contest-day-2-happy-number/" rel="alternate" type="text/html" title="Contest - Day 2 - Happy Number" /><published>2020-04-02T01:21:00-07:00</published><updated>2020-04-02T01:21:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/04/02/contest-day-2-happy-number</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/04/02/contest-day-2-happy-number/">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; is running a 30 day “Covid 19” style contest for everyone on self quarantine and social distancing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;happy-number&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/happy-number/&quot;&gt;Happy Number&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Write an algorithm to determine if a number is “happy”.&lt;/p&gt;
&lt;p&gt;A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;Once you know how to pull individual digits out of a number, these are &lt;em&gt;relatively&lt;/em&gt; straight forward. You just need to keep track of your in-progress sums vs. total sums and the total sums you’ve previously seen for loop detection.&lt;/p&gt;
&lt;p&gt;To get a digit, you just mod the number by its base (&lt;code&gt;10&lt;/code&gt;, assuming its &lt;code&gt;base 10&lt;/code&gt;). Then you divide the original number by its base and continue. An unrolled look for the number &lt;code&gt;19&lt;/code&gt; would look like:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;19&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# =&amp;gt; 9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# (x =&amp;gt; 1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# (x =&amp;gt; 0)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;I don’t think I missed any this time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;There’s possibly a way to detect loops without using a set (mathematical) to decrease memory usage but I don’t know of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; isHappy(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, n: &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;        seen &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;()&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;        curr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;        prev &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; prev &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; prev &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; seen:&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot;&gt;&lt;/a&gt;            seen.add(prev)&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot;&gt;&lt;/a&gt;            curr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prev&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot;&gt;&lt;/a&gt;            prev &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;   &lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; curr:&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot;&gt;&lt;/a&gt;                digit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; curr &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot;&gt;&lt;/a&gt;                curr &lt;span class=&quot;op&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot;&gt;&lt;/a&gt;                prev &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; digit &lt;span class=&quot;op&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-19&quot;&gt;&lt;a href=&quot;#cb3-19&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-20&quot;&gt;&lt;a href=&quot;#cb3-20&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; prev &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 36 ms, faster than 30.40% of Python3 online submissions for Happy Number.
Memory Usage: 13.9 MB, less than 5.26% of Python3 online submissions for Happy Number.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="leetcode covid contest" /><category term="python" /><summary type="html">Leetcode is running a 30 day “Covid 19” style contest for everyone on self quarantine and social distancing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Contest - Day 1 - Single Number</title><link href="https://andrew.hawker.io/leetcode/2020/04/01/contest-day-1-single-number/" rel="alternate" type="text/html" title="Contest - Day 1 - Single Number" /><published>2020-04-01T01:37:00-07:00</published><updated>2020-04-01T01:37:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/04/01/contest-day-1-single-number</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/04/01/contest-day-1-single-number/">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; is running a 30 day “Covid 19” style contest for everyone on self quarantine and social distancing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;single-number&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot;&gt;Single Number&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Given a non-empty array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,2,1]
Output: 1

Input: [4,1,2,1,2]
Output: 4&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;This is very easy using the &lt;code&gt;collections.Counter&lt;/code&gt; in python stlib. That might be &lt;em&gt;cheating&lt;/em&gt; but I’m going to allow it. Stand on the shoulders of well tested (code) giants, I say.&lt;/p&gt;
&lt;p&gt;However, the question posits there is a way to do it without using &lt;em&gt;extra&lt;/em&gt; memory. So, storing counters is likely not the optimal solution.&lt;/p&gt;
&lt;p&gt;This led me to thinking about truth tables. What boolean operation will indicate &lt;em&gt;once&lt;/em&gt; but not &lt;em&gt;twice&lt;/em&gt;? &lt;strong&gt;XOR&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the result of our &lt;strong&gt;XOR&lt;/strong&gt; logic is the input value, there is only one occurrence of it. If it’s zero, then there was either none, or more than 1 of them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;I don’t think I missed any this time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;I don’t think I missed any this time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Counting&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; collections&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; singleNumber(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, nums: List[&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;        counts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; collections.Counter(nums)&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; counts.most_common()[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;XOR&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; singleNumber(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, nums: List[&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;        r &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;            r &lt;span class=&quot;op&quot;&gt;^=&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Counting&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 84 ms, faster than 85.38% of Python3 online submissions for Single Number.
Memory Usage: 16.3 MB, less than 6.56% of Python3 online submissions for Single Number.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;XOR&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 88 ms, faster than 65.17% of Python3 online submissions for Single Number.
Memory Usage: 15.6 MB, less than 6.56% of Python3 online submissions for Single Number.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="leetcode covid contest" /><category term="python" /><summary type="html">Leetcode is running a 30 day “Covid 19” style contest for everyone on self quarantine and social distancing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Add Two Numbers</title><link href="https://andrew.hawker.io/leetcode/2020/03/31/add-two-numbers/" rel="alternate" type="text/html" title="Add Two Numbers" /><published>2020-03-31T01:34:00-07:00</published><updated>2020-03-31T01:34:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/31/add-two-numbers</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/31/add-two-numbers/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;add-two-numbers&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/&quot;&gt;Add Two Numbers&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)
Output: 7 -&amp;gt; 0 -&amp;gt; 8
Explanation: 342 + 465 = 807.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;This one took me a few swings, mainly because I didn’t read that the return value was supposed to be a linked list. I had implemented the logic to sum the linked lists properly and then realized I’d have to iterate over the resulting integer to build a list. Bleh. So I started over so I could implement it in a single iteration of &lt;code&gt;O(N)&lt;/code&gt; time.&lt;/p&gt;
&lt;p&gt;The solution works as follows:&lt;/p&gt;
&lt;p&gt;Continue looping while either of the nodes has a &lt;code&gt;next&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Sum digits from each list. Use zero if we’ve exhausted one of the lists. Track a “carry” if sum is greater than 10. Result list should only store &lt;code&gt;sum % 10&lt;/code&gt; so it only stores a single digit.&lt;/p&gt;
&lt;p&gt;If we’re at the end of both lists, check to see if we still have a “carry”. If so, need to append another node to result list with the value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The final “carry” when both lists were exhausted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;I feel like the tracking of the head node relative to the result list moving pointer code is messy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# class ListNode:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#     def __init__(self, x):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#         self.val = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#         self.next = None&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; addTwoNumbers(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, l1: ListNode, l2: ListNode) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; ListNode:&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;        carry &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;        head &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ListNode(&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; l1 &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; l2:&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; carry:&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;                    l3.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ListNode(carry)&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;            l1_val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l1.val &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; l1 &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;            l2_val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l2.val &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; l2 &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;            value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l1_val &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l2_val &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; carry&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;            digit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot;&gt;&lt;/a&gt;            &lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; l3.val &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot;&gt;&lt;/a&gt;                l3.val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; digit&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot;&gt;&lt;/a&gt;                head &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l3&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;#cb2-29&quot;&gt;&lt;/a&gt;                l3.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ListNode(digit)&lt;/span&gt;
&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;#cb2-30&quot;&gt;&lt;/a&gt;                l3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l3.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;#cb2-31&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-32&quot;&gt;&lt;a href=&quot;#cb2-32&quot;&gt;&lt;/a&gt;            carry &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-33&quot;&gt;&lt;a href=&quot;#cb2-33&quot;&gt;&lt;/a&gt;            l1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l1.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; l1 &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-34&quot;&gt;&lt;a href=&quot;#cb2-34&quot;&gt;&lt;/a&gt;            l2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; l2.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; l2 &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-35&quot;&gt;&lt;a href=&quot;#cb2-35&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb2-36&quot;&gt;&lt;a href=&quot;#cb2-36&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; head&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 68 ms, faster than 77.41% of Python3 online submissions for Add Two Numbers.
Memory Usage: 13.8 MB, less than 5.67% of Python3 online submissions for Add Two Numbers.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode medium" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Longest Common Prefix</title><link href="https://andrew.hawker.io/leetcode/2020/03/30/longest-common-prefix/" rel="alternate" type="text/html" title="Longest Common Prefix" /><published>2020-03-30T01:44:00-07:00</published><updated>2020-03-30T01:44:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/30/longest-common-prefix</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/30/longest-common-prefix/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;longest-common-prefix&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/&quot;&gt;Longest Common Prefix&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no common prefix, return an empty string &quot;&quot;.&lt;/p&gt;
&lt;p&gt;All given inputs are in lowercase letters a-z.&lt;/p&gt;
&lt;p&gt;Example inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [&amp;quot;flower&amp;quot;,&amp;quot;flow&amp;quot;,&amp;quot;flight&amp;quot;]
Output: &amp;quot;fl&amp;quot;

Input: [&amp;quot;dog&amp;quot;,&amp;quot;racecar&amp;quot;,&amp;quot;car&amp;quot;]
Output: &amp;quot;&amp;quot;
Explanation: There is no common prefix among the input strings.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;This one seems pretty straight forward.&lt;/p&gt;
&lt;p&gt;Maintain an index and loop through each string, checking the current character to see if it is the same. If it’s not, or we run out of characters in one of the strings, we’re done.&lt;/p&gt;
&lt;p&gt;With that index, just slice the string to get the prefix.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handling the zero/empty string case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;Inlining the &lt;code&gt;is_equal_at_index&lt;/code&gt; function inside of the loop will likely increase runtime speed here at the cost of readability.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_equal_at_index(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, strs: List[&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;], i: &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;        char &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; strs[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][i]&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(strs)):&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; char &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; strs[j][i]:&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; longestCommonPrefix(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, strs: List[&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;        i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_equal_at_index(strs, i):&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;IndexError&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;                i &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; strs[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:i] &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 32 ms, faster than 66.42% of Python3 online submissions for Longest Common Prefix.
Memory Usage: 13.9 MB, less than 6.67% of Python3 online submissions for Longest Common Prefix.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Longest Substring Without Repeating Characters</title><link href="https://andrew.hawker.io/leetcode/2020/03/27/longest-substring-without-repeating-characters/" rel="alternate" type="text/html" title="Longest Substring Without Repeating Characters" /><published>2020-03-27T00:11:00-07:00</published><updated>2020-03-27T00:11:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/27/longest-substring-without-repeating-characters</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/27/longest-substring-without-repeating-characters/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;longest-substring-without-repeating-characters&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Example inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;abcabcbb&amp;quot;
Output: 3
Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3.

Input: &amp;quot;bbbbb&amp;quot;
Output: 1
Explanation: The answer is &amp;quot;b&amp;quot;, with the length of 1.

Input: &amp;quot;pwwkew&amp;quot;
Output: 3
Explanation: The answer is &amp;quot;wke&amp;quot;, with the length of 3.
             Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;I spent some time thinking about this but couldn’t come up with anything faster than &lt;code&gt;O(N^2)&lt;/code&gt; although I can almost guarantee there is a way.&lt;/p&gt;
&lt;p&gt;In any case, the thought is iterate through the permutations and use a set to track the characters seen. When we run into a character we’ve seen, capture the length (if the max), and reset on next initial character.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If iteration completes w/o running into a character it hasn’t seen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;There is probably a way to cleanup the logic so the seen &amp;amp; fallthrough code can be merged instead of copied.&lt;/p&gt;
&lt;p&gt;There is probably a faster solution than &lt;code&gt;O(N^2)&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; lengthOfLongestSubstring(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; s:&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;        seen &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;()&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;        max_len &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(s)):&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;            seen.add(s[i])&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(s)):&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; s[j] &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; seen:&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;                    max_len &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(max_len, &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(seen))&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;                    seen.clear()&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;                    seen.add(s[j])&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;                max_len &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(max_len, &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(seen))&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;                seen.clear()&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; max_len&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 508 ms, faster than 15.12% of Python3 online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 13.9 MB, less than 5.10% of Python3 online submissions for Longest Substring Without Repeating Characters.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode medium" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Isomorphic Strings</title><link href="https://andrew.hawker.io/leetcode/2020/03/26/isomorphic-strings/" rel="alternate" type="text/html" title="Isomorphic Strings" /><published>2020-03-26T02:24:00-07:00</published><updated>2020-03-26T02:24:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/26/isomorphic-strings</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/26/isomorphic-strings/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;isomorphic-strings&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/isomorphic-strings/&quot;&gt;Isomorphic Strings&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Given two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, determine if they are isomorphic.&lt;/p&gt;
&lt;p&gt;Two strings are isomorphic if the characters in &lt;code&gt;s&lt;/code&gt; can be replaced to get &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.&lt;/p&gt;
&lt;p&gt;You may assume both &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; have the same length.&lt;/p&gt;
&lt;p&gt;Example inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: s = &amp;quot;egg&amp;quot;, t = &amp;quot;add&amp;quot;
Output: true

Input: s = &amp;quot;foo&amp;quot;, t = &amp;quot;bar&amp;quot;
Output: false

Input: s = &amp;quot;paper&amp;quot;, t = &amp;quot;title&amp;quot;
Output: true&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;This one took me longer than it should have. It was a case of me not reading the problem statement correctly and just hammering my head on it before going back, reading carefully, and continuing forward. A mistake I make often, unfortunately.&lt;/p&gt;
&lt;p&gt;Initial thought was to just to group by and count characters for each string. If they were different, the input strings were of a different “pattern”, thus false. This works for &lt;em&gt;most&lt;/em&gt; test cases but eventually you run into the cases where they try and remap the input character multiple times and it breaks. Luckly, there isn’t much to change to support that.&lt;/p&gt;
&lt;p&gt;In short, my solution does this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop through all chars in the strings&lt;/li&gt;
&lt;li&gt;Store mapping of char at index &lt;code&gt;i&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; to char at index &lt;code&gt;i&lt;/code&gt; in string &lt;code&gt;t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If this was already mapped and they don’t match, it’s not isomorphic&lt;/li&gt;
&lt;li&gt;Bump counts for the characters in string &lt;code&gt;s&lt;/code&gt; and string &lt;code&gt;t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the counts aren’t equal, we have inconsistent “patterns” between the strings, so not isomorphic&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empty input strings. Originally considered them false, although two empty strings &lt;em&gt;are&lt;/em&gt; identical.&lt;/li&gt;
&lt;li&gt;Completely messed the character re-mapping rules in the problem statement. &lt;strong&gt;READ SLOWLY&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;You can do this without using counters by doing a current/previous iteration and doing a few comparisons but this code feels a bit more idiomatic. My intuition says that it’ll be slightly slower in runtime but use less memory.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; collections&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; isIsomorphic(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;, t: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; s &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; t:&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(t):&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;        s_counts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; collections.Counter()&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;        t_counts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; collections.Counter()&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;        charmap &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(s)):&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;            s_char &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; s[i]&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;            t_char &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; t[i]&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;            &lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;            r_char &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; charmap.setdefault(s_char, t_char)&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; r_char &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; t_char:&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;            s_counts[s_char] &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;            t_counts[t_char] &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; s_counts[s_char] &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; t_counts[t_char]:&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 64 ms, faster than 11.29% of Python3 online submissions for Isomorphic Strings.
Memory Usage: 13 MB, less than 100.00% of Python3 online submissions for Isomorphic Strings.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reverse Vowels of a String</title><link href="https://andrew.hawker.io/leetcode/2020/03/24/reverse-vowels-of-a-string/" rel="alternate" type="text/html" title="Reverse Vowels of a String" /><published>2020-03-24T23:42:00-07:00</published><updated>2020-03-24T23:42:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/24/reverse-vowels-of-a-string</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/24/reverse-vowels-of-a-string/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;reverse-vowels-of-a-string&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-vowels-of-a-string/&quot;&gt;Reverse Vowels of a String&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;The vowels does not include the letter &lt;code&gt;&quot;y&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;hello&amp;quot;
Output: &amp;quot;holle&amp;quot;

Input: &amp;quot;leetcode&amp;quot;
Output: &amp;quot;leotcede&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;Initial thought was a &lt;a href=&quot;https://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues%22&quot;&gt;queue&lt;/a&gt; as the data structure to use here. However, &lt;a href=&quot;https://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues%22&quot;&gt;stack&lt;/a&gt; is what I wanted, I was just tired and messed up my ordering.&lt;/p&gt;
&lt;p&gt;I spent some more time thinking about this and it can be solved with a double pointer iteration as well. This is likely the optimal implementation as it does not require double iteration, &lt;code&gt;O(2n)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In short, my thinking for a naive soltuion was this:&lt;/p&gt;
&lt;p&gt;Iterate over the string once, storing all vowels in the stack.&lt;/p&gt;
&lt;p&gt;Iterate over it again to build the result string, use consonants when you find them. When you find a vowel, pop from the stack instead and continue.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I forgot to include capital letters in my frozenset for determine vowel vs. consonant. :facepalm:&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;As mentioned above, a double pointer (head/tail) iteration would be faster and use less memory.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    vowel_chars &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;frozenset&lt;/span&gt;([&lt;span class=&quot;st&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;U&amp;#39;&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.vowels &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_vowel(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, c):&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; c &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.vowel_chars&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_consonant(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, c):&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_vowel(c)&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; reverseVowels(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;        result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_vowel(c):&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.vowels.append(c)&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_vowel(c):&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot;&gt;&lt;/a&gt;                result &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.vowels.pop()&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot;&gt;&lt;/a&gt;                result &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 84 ms, faster than 16.99% of Python3 online submissions for Reverse Vowels of a String.
Memory Usage: 14.1 MB, less than 93.33% of Python3 online submissions for Reverse Vowels of a String.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Valid Parentheses</title><link href="https://andrew.hawker.io/leetcode/2020/03/24/valid-parentheses/" rel="alternate" type="text/html" title="Valid Parentheses" /><published>2020-03-24T00:21:00-07:00</published><updated>2020-03-24T00:21:00-07:00</updated><id>https://andrew.hawker.io/leetcode/2020/03/24/valid-parentheses</id><content type="html" xml:base="https://andrew.hawker.io/leetcode/2020/03/24/valid-parentheses/">&lt;p&gt;I’m trying to get in a habit of starting my mornings off with coffee and a &lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt; problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!&lt;/p&gt;
&lt;section id=&quot;valid-parentheses&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/&quot;&gt;Valid Parentheses&lt;/a&gt;&lt;/h2&gt;
&lt;section id=&quot;problem&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;'(', ')', '{', '}', '[' and ']'&lt;/code&gt;, determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;An input string is valid if:&lt;/p&gt;
&lt;p&gt;Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Note that an empty string is also considered valid.&lt;/p&gt;
&lt;p&gt;Example inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;()&amp;quot;
Output: true

Input: &amp;quot;()[]{}&amp;quot;
Output: true

Input: &amp;quot;(]&amp;quot;
Output: false

Input: &amp;quot;([)]&amp;quot;
Output: false

Input: &amp;quot;{[]}&amp;quot;
Output: true&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id=&quot;thinking&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Thinking&lt;/h3&gt;
&lt;p&gt;Past experience screams &lt;a href=&quot;https://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues%22&quot;&gt;stack&lt;/a&gt; as the data structure to use here. This immediately reminded me of writing prefix and postfix calculators in college courses.&lt;/p&gt;
&lt;p&gt;I tried a few solutions before that, hoping that the input test cases would be simple enough that I could bypass it. This ultimately failed, as I should have expected.&lt;/p&gt;
&lt;p&gt;In short, my thinking was this:&lt;/p&gt;
&lt;p&gt;If the input length isn’t an even number, you already know it’s inbalanced.&lt;/p&gt;
&lt;p&gt;Iterate through each character of the input, push “open” symbols &lt;code&gt;'(', '{', and '['&lt;/code&gt; onto the stack and continue. When the character is a “close” symbol of &lt;code&gt;')', '}', or ']'&lt;/code&gt;, pop from the stack and compare. The stack value should be a the opposite symbol that you’re currently on in a correctly balanced input.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;corner-cases&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Corner Cases&lt;/h3&gt;
&lt;p&gt;The following corner cases are what I missed in my initial solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a “close” symbol appears before any “open” symbols, the stack will be empty (nothing to pop). If empty, it’s invalid input.&lt;/li&gt;
&lt;li&gt;If the stack still contains items after all input has been processed, it’s invalid.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;improvements&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;
&lt;p&gt;The following are things I would improve from my original solution once it passed all the tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider checking just for “close” symbols and using “else” to capture opens. However, this would leave you open to input characters that are not symbols.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;not&lt;/code&gt; vs. &lt;code&gt;len() == 0&lt;/code&gt;. Using &lt;code&gt;not&lt;/code&gt; is more idiomatic python but &lt;code&gt;len()&lt;/code&gt; check feels more explicit to the reader.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id=&quot;solution&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution:&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    open_symbols &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;    close_symbols &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;    symbols &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;zip&lt;/span&gt;(open_symbols, close_symbols))&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.stack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_open(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; s &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.open_symbols&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_close(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; s &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.close_symbols&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; isValid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, s: &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_open(val):&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.stack.append(val)&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.is_close(val):&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.stack) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot;&gt;&lt;/a&gt;                prev &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.stack.pop()&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.symbols[prev]:&lt;/span&gt;
&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;#cb2-29&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;#cb2-30&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;#cb2-31&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.stack) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&quot;score&quot; class=&quot;level3&quot;&gt;
&lt;h3&gt;Score&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Runtime: 24 ms, faster than 90.39% of Python3 online submissions for Valid Parentheses.
Memory Usage: 13 MB, less than 98.26% of Python3 online submissions for Valid Parentheses.&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="leetcode" /><category term="leetcode easy" /><category term="python" /><summary type="html">I’m trying to get in a habit of starting my mornings off with coffee and a Leetcode problem before work. Ease my way into the day and get the brain juices flowing. Let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Server side request logging with nuxt.js</title><link href="https://andrew.hawker.io/dailies/2020/03/17/nuxt-server-side-logging/" rel="alternate" type="text/html" title="Server side request logging with nuxt.js" /><published>2020-03-17T04:58:00-07:00</published><updated>2020-03-17T04:58:00-07:00</updated><id>https://andrew.hawker.io/dailies/2020/03/17/nuxt-server-side-logging</id><content type="html" xml:base="https://andrew.hawker.io/dailies/2020/03/17/nuxt-server-side-logging/">&lt;p&gt;By default, &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;nuxt.js&lt;/a&gt; does not have server-side request logging out of the box. Thankfully, we can quickly add it using the &lt;a href=&quot;https://github.com/geta6/connect-logger&quot;&gt;connect-logger&lt;/a&gt; with the following additions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install the connect-logger package&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode sh&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;yarn&lt;/span&gt; add connect-logger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Update ‘serverMiddleware’ in your nuxt.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; logger &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;connect-logger&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;  serverMiddleware&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;logger&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;%date %status %method %url (%time)&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;  ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;View the requests in stdout&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app_1  | 20.03.17 18:26:56 302 GET /healthy (513ms)
app_1  | 20.03.17 18:27:04 302 GET / (114ms)
app_1  | 20.03.17 18:27:05 302 GET / (38ms)
app_1  | 20.03.17 18:27:16 302 GET /workspaces/1234 (42ms)&lt;/code&gt;&lt;/pre&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="dailies" /><category term="nuxt" /><summary type="html">By default, nuxt.js does not have server-side request logging out of the box. Thankfully, we can quickly add it using the connect-logger with the following additions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The AWS ECS container does not exist</title><link href="https://andrew.hawker.io/dailies/2020/03/10/codepipeline-ecs-container-does-not-exist/" rel="alternate" type="text/html" title="The AWS ECS container does not exist" /><published>2020-03-10T05:17:00-07:00</published><updated>2020-03-10T05:17:00-07:00</updated><id>https://andrew.hawker.io/dailies/2020/03/10/codepipeline-ecs-container-does-not-exist</id><content type="html" xml:base="https://andrew.hawker.io/dailies/2020/03/10/codepipeline-ecs-container-does-not-exist/">&lt;section id=&quot;problem&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Your CodePipeline ECS deployment is failing with a &lt;strong&gt;&lt;code&gt;The AWS ECS container ${container} does not exist&lt;/code&gt;&lt;/strong&gt; message.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;scenario&quot; class=&quot;level2&quot;&gt;
&lt;h2&gt;Scenario&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt; Check out the official AWS documentation for the &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definitions&quot;&gt;container definitions&lt;/a&gt; for more details&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This problem can occur in a number of situations but let’s just imagine we have a task definition contains a single entry in its &lt;code&gt;container definitions&lt;/code&gt;. Now we want to add another container to the task, say a sidecar container like the &lt;a href=&quot;https://docs.datadoghq.com/integrations/ecs_fargate/&quot;&gt;datadog agent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, you add it to your ECS task definition and push a new revision.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${datadog_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${datadog_image}&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;essential&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;logConfiguration&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;logDriver&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;awslogs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;options&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;awslogs-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;/aws/ecs/${cluster_name}/${datadog_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;awslogs-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;us-west-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;awslogs-stream-prefix&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${datadog_name}&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;secrets&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;DD_API_KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;&amp;quot;valueFrom&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${DD_API_KEY}&amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ECS_FARGATE&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, you add it to your &lt;code&gt;imagedefinitions.json&lt;/code&gt; generated in your CodePipeline build stage.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${your_container_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;imageUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;${your_container_image}&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;${datadog_agent_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;imageUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;${datadog_agent_image}&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, you run a new CodePipeline and run into the following error: &lt;strong&gt;&lt;code&gt;The AWS ECS container datadog-agent does not exist&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/posts/container-does-not-exist.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What the heck?&lt;/p&gt;
&lt;p&gt;The ECS service being updated with a new task definition from CodePipeline &lt;strong&gt;MUST&lt;/strong&gt; have the container defined in it. This means that you must add the container definition, create a new task revision, &lt;strong&gt;AND&lt;/strong&gt; force a new service deployment &lt;em&gt;prior&lt;/em&gt; to doing an ECS deployment via CodePipeline.&lt;/p&gt;
&lt;/section&gt;</content><author><name>Andrew Hawker</name><email>andrew.r.hawker@gmail.com</email></author><category term="dailies" /><category term="aws" /><category term="codepipeline" /><category term="ecs" /><category term="fargate" /><summary type="html">Problem</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" /><media:content medium="image" url="https://andrew.hawker.io/assets/images/android-chrome-512x512.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>